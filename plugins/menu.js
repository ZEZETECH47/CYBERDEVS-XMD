const config = require('../config')
const { cmd, commands } = require('../command');
const os = require("os")
const {runtime} = require('../lib/functions')
const axios = require('axios')

cmd({
    pattern: "menu",
    alias: ["allmenu","fullmenu"],
    use: '.menu',
    desc: "Show all bot commands",
    category: "menu",
    react: "üìú",
    filename: __filename
}, 
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        let dec = `‚ï≠‚îÅ‚îÅ„Äî üöÄ *${config.BOT_NAME}* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ üëë *Owner :* ${config.OWNER_NAME}
‚îÉ‚óà‚îÉ‚Ä¢ ‚öôÔ∏è *Prefix :* [${config.PREFIX}]
‚îÉ‚óà‚îÉ‚Ä¢ üåê *Platform :* vercel
‚îÉ‚óà‚îÉ‚Ä¢ üì¶ *Version :* 5.0.0 Pro
‚îÉ‚óà‚îÉ‚Ä¢ ‚è±Ô∏è *Runtime :* ${runtime(process.uptime())}
‚îÉ‚óà‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑

‚ï≠‚îÅ‚îÅ„Äî üì• *MENU* „Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢ üß† repo
‚îÉ‚óà‚îÉ‚Ä¢ ü§ñ song
‚îÉ‚óà‚îÉ‚Ä¢ üèì ping
‚îÉ‚óà‚îÉ‚Ä¢ üèì update
‚îÉ‚óà‚îÉ‚Ä¢ üöÄ speed
‚îÉ‚óà‚îÉ‚Ä¢ üì° live
‚îÉ‚óà‚îÉ‚Ä¢ üíö alive
‚îÉ‚óà‚îÉ‚Ä¢ ‚è±Ô∏è runtime
‚îÉ‚óà‚îÉ‚Ä¢ ‚è≥ uptime
‚îÉ‚óà‚îÉ‚Ä¢ üì¶ url
‚îÉ‚óà‚îÉ‚Ä¢ üëë owner
‚îÉ‚óà‚îÉ‚Ä¢ üìú menu
‚îÉ‚óà‚îÉ‚Ä¢ üìú test
‚îÉ‚óà‚îÉ‚Ä¢ üîÑ restart
‚îÉ‚óà‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îà‚ä∑
> ${config.DESCRIPTION}`;

        await conn.sendMessage(
            from,
            {
                image: { url: config.MENU_IMAGE_URL || 'https://res.cloudinary.com/dgy2dutjs/image/upload/v1751624587/url.crissvevo.co.tz/IMG_2353_fze42l.jpg' },
                caption: dec,
                contextInfo: {
                    mentionedJid: [m.sender],
                    forwardingScore: 999,
                    isForwarded: true,
                    forwardedNewsletterMessageInfo: {
                        newsletterJid: '',
                        newsletterName: config.BOT_NAME,
                        serverMessageId: 143
                    }
                }
            },
            { quoted: mek }
        );

        // Send audio
        await conn.sendMessage(from, {
            audio: { url: 'https://github.com/criss-vevo/CRISS-DATA/raw/refs/heads/main/autovoice/menunew.m4a' },
            mimetype: 'audio/mp4',
            ptt: true
        }, { quoted: mek });
        
    } catch (e) {
        console.log(e);
        reply(`‚ùå Error: ${e}`);
    }
});
